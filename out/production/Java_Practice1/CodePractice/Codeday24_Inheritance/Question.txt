
Que 1 : Simple Vehicle Inheritance in Java
===========================================

Demonstrating Inheritance to Simplify and Extend Class Functionality and
This motto emphasizes the key educational goal of the program: to show how inheritance can be used to simplify code by
reusing existing class functionality and extending it with new features specific to derived classes.


Define the base class Vehicle
-------------------------------

Attributes:
make: String
model: String
year: int

Constructor:
Vehicle(String make, String model, int year): Constructor to initialize the attributes.

Methods:
void displayDetails(): Method to display the details of the vehicle.



Define the subclass Car Inherits from Vehicle
---------------------------------------------

Attributes:
numberOfDoors: int

Constructor:
Car(String make, String model, int year, int numberOfDoors): Constructor to initialize the attributes.

Methods:
void displayDetails(): Method to display the details of the car, overriding the method from Vehicle.



Define the subclass Bike Inherits from Vehicle
----------------------------------------------

Attribute:
type: String

Constructor:
Bike(String make, String model, int year, String type): Constructor to initialize the attributes.

Methods:
void displayDetails(): Method to display the details of the bike, overriding the method from Vehicle.



Create Test class
-----------------
-> create main method
-> in main method create Car object and Bick object.
-> Print the details of Car class and Bick class by calling displayDetails() methods of both class.


Condition :
-----------
if any numeric value is zero or negative then print
"Error Invalid Input".


TEST CASE 1 :
-------------
sample input  : When your reading values for Vehicle class OR Car
class OR Bike class then make sure if any numeric value is <=0 then print "Error Invalid Input".

sample output : Error Invalid Input



TEST CASE 2 :
-------------
sample input : Car car = new Car("Audi", "Q8", 2021, 4);
               System.out.println("Car Details:");
               car.displayDetails();

               Bike bike = new Bike("Yamaha", "MT-07", 2020, "Sports");
               System.out.println("\nBike Details:");
               bike.displayDetails();


sample output :
                Car Details:
                Make: Audi
                Model: Q8
                Year: 2021
                Number of Doors: 4

                Bike Details:
                Make: Yamaha
                Model: MT-07
                Year: 2020
                Type: Sports


#######################################################################

Que 2 : Calculate Student Percentage
====================================

Create a simple Java program using inheritance to manage student data.
We have a base class Student, and two subclasses: ScienceStudent and ArtsStudent.
Each subclass should calculate the percentage of marks based on its own set of subjects.
The percentage calculation will be done using an overridden method.

Define the base class Student
------------------------------
Attributes: protected String name and protected int rollNumber.

Costructor:  A constructor to initialize these attributes

Methods: 1) public void displayDetails() a method to display student details.
         2) public double calculatePercentage() a method wich will calculate and return percentage.



Define class ScienceStudent extends from Student class
---------------------------------------------------------------
Attributes: private int physicsMarks, private int chemistryMarks, private int mathMarks
Costructor:  A constructor to initialize current class attributes and super class attributes.

Methods: Override displayDetails() a method to display parent class details as well current class details.
         Override calculatePercentage() a method which will calculate and return percentage.




Define class class ArtsStudent extends from Student class
---------------------------------------------------------
Attributes: private int historyMarks, private int geographyMarks, private int englishMarks

Costructor:  A constructor to initialize current class attributes and super class attributes.

Methods: Override displayDetails() a method to display parent class details as well current class details.
         Override calculatePercentage() a method wich will calculate and return percentage.


Create Test class
-----------------
-> create main method
-> in main method create ScienceStudent object and  ArtsStudent object.
-> print the details of both class by calling displayDetails() method.
-> print the percentage of ScienceStudent & ArtsStudent by calling calculatePercentage() methods.


Condition :
-----------
if any numeric value is zero or negative then print "Error Invalid Input".


TEST CASE 1 :
-------------
sample input  : When your reading values for Student Class OR
ScienceStudent class OR ArtsStudent class then make sure if any numeric value is <=0 then print "Error Invalid Input".

sample output : Error Invalid Input


TEST CASE 2 :
-------------
sample input : ScienceStudent scienceStudent = new ScienceStudent("Anjali", 101, 85, 90, 80);
               ArtsStudent artsStudent = new ArtsStudent("Aryan", 102, 75, 80, 85);

sample output :
                Science Student Details:
                Name: Anjali
                Roll Number: 101
                Physics Marks: 85
                Chemistry Marks: 90
                Math Marks: 80
                Percentage: 85.0%

                Arts Student Details:
                Name: Bob
                Roll Number: 102
                History Marks: 75
                Geography Marks: 80
                English Marks: 85
                Percentage: 80.0%

#######################################################################

Que 3 : Circle and Cylinder Shape Calculation Program
======================================================

You are tasked with developing a software application for a company that designs
custom containers.
The company needs to calculate the surface area of circular bases and the volumes
of cylindrical containers to estimate materials and costs.
To achieve this, you will create a Java program with the following requirements:


Class Circle is given to you.
----------------------------

Add below details to the class

1. Instance variables:

radius: double.

2. Create a no constructor that assigns default values to instance variables.

3. Create parameterized constructor that accepts radius.

4. Create below methods,

Method name: getArea

Return type: double

This method should return the area of the circle. Return -1 if radius is negative.

Create a sub class of Circle with name Cylinder
-----------------------------------------------

Add below details to the class

1. Instance variables:

height: double.

2. Create a No constructor that assigns default values to instance variables.

3. Create parameterized constructor that accepts radius, height.

4. Create below methods,

Method name: getVolume

Return type: double

This method should return the volume of the cylinder. Return -1 if height is negative.

An ELC class ShapeTester is given to you with a main method. Use this class to test your



Condition :
-----------
if any numeric value is zero or negative then print "Error Invalid Input".


TEST CASE 1 :
-------------
sample input  : When your reading values for Circle Class OR Cylinder class then make sure if any numeric value is <=0 then print "Error Invalid Input".

sample output : Error Invalid Input


TEST CASE 2 :
-------------
sample input  : Cylinder c = new Cylinder(5, 5);
sample output : Volume = 392.5
                Area = 78.5

#######################################################################

Que 4 : A Hierarchical Model of Animals
========================================

Scenario Description:

In a virtual zoo management system, you need to organize and categorize various types of animals to efficiently manage their characteristics and behaviors.
To achieve this, you decide to implement a class hierarchy using multilevel inheritance.

1. Create the Animal Class
Requirements:
Define a private String attribute named name.
Implement a parameterized constructor to initialize name.
Implement getter and setter methods for name.
Create a method to display the animal's details.

2. Create the Mammal Class
Requirements:
Extend the Animal class.
Add a private boolean attribute named hasFur.
Implement a parameterized constructor to initialize name (from Animal) and hasFur.
Implement getter and setter methods for hasFur.
Override the displayDetails method to include information about fur.

3. Create the Dog Class
Requirements:
Extend the Mammal class.
Add a private String attribute named breed.
Implement a parameterized constructor to initialize name, hasFur (from Mammal), and breed.
Implement getter and setter methods for breed.
Override the displayDetails method to include information about the breed.

4. Create the Main Class
Requirements:
Create an instance of the Dog class.
Display details of the Dog object to demonstrate inheritance.


Condition :
-----------
if any numeric value is zero or negative then print "Error Invalid Input".


TEST CASE 1 :
-------------
sample input  : When your reading numeric values for any above Classe then make sure if any numeric value is <=0 then print "Error Invalid Input".

sample output : Error Invalid Input



TEST CASE 2 :
-------------
sample input : Dog myDog = new Dog("Buddy", true, "Golden Retriever");

sample output :
               Dog Details:
               Animal Name: Buddy
               Has Fur: Yes
               Breed: Golden Retriever


#######################################################################

Que 5 : Ticket Management System with VIP and Student Tickets
=============================================================

You have been hired by an event management company to develop a ticketing system that can manage different types of tickets for various events.
The system needs to handle regular tickets, VIP tickets with special access privileges, and student tickets that may have a discount.
Your task is to create a Java program with the following requirements:

Design a Ticket class with attributes like event name, seat number, and price.

1.Create a class Ticket
------------------------

Instance variable:-

String eventName,private

int seatNumber,private

double price,private

Create a parameterized constructor for all Instance variable to initialize the variable.

Generate Getters and setters for all Instance variable to get values and set values.


2.Create another class VIPTicket and inherit Ticket class here.
---------------------------------------------------------------

Instance variable:-

String specialAccess,private

Create a parameterized constructor for Instance variable to initialize the variable.

//Use super keyword to initialize Ticket class constructor attributes.

Generate Getters and setters for Instance variable to get values and set values.


3.Create another class StudentTicket and inherit Ticket class here.
-------------------------------------------------------------------

Instance variable:-

boolean studentDiscount,private

Create a parameterized constructor for Instance variable to initialize the variable.

//Use super keyword to initialize Ticket class constructor attributes.

Generate Getters and setters for Instance variable to get values and set values.

Create a class MainTicket which contains main method to demonstrate the usage.

//Creating a Ticket object using the parameterized constructor

//Creating a VIPTicket object using the parameterized constructor

//Creating a StudentTicket object using the parameterized constructor


Condition :
-----------
if any numeric value is zero or negative then print "Error Invalid Input".


TEST CASE 1 :
-------------
sample input  : When your reading values for Ticket class OR VIPTicket OR StudentTicket then make sure if any numeric value is <=0 then print "Error Invalid Input".

sample output : Error Invalid Input



TEST CASE 2 :
-------------
sample input  :
                  Ticket regularTicket = new Ticket("Concert", 101, 50.0);
                  VIPTicket vipTicket = new VIPTicket("VIP Concert", 201, 100.0, "Backstage Access");
                  StudentTicket studentTicket = new StudentTicket("Student Event", 301, 30.0, true);

sample output :
                Regular Ticket:
                Event: Concert
                Seat Number: 101
                Price: $50.0

                VIP Ticket:
                Event: VIP Concert
                Seat Number: 201
                Price: $100.0
                Special Access: Backstage Access

                Student Ticket:
                Event: Student Event
                Seat Number: 301
                Price: $30.0
                Student Discount: true


#######################################################################

Que 6 : Student Fee Management System
=============================================================

-> A university needs an efficient way to manage and process fees for its students. There are different types of students with varying fee structures.
   The university wants a system to handle the following scenarios:

1) Regular Students: Students who only need to pay the exam fee. This is the base class scenario.

2) Day Scholars: Students who attend classes daily but do not stay in hostels. They have an additional transport fee on top of the exam fee. This fee needs to be managed and calculated separately.

3) Hostellers: Students who stay in university hostels and have additional hostel fees. Their total fee is the sum of the exam fee and hostel fee.


Create BLC class as Student
---------------------------
It contains the following implementation.

Instance Variables: studentId : int , name :String , examFee:double

Methods: displayDetails(): String , payFee() :double

Define parameterized constructor and a toString method.

Create two BLC sub classes of Student called DayScholar and Hosteller.
Add the following implementations to each class.

DayScholar:
-----------

Instance Variables : transportFee:double ,

Methods: Define parameterized constructor


Hosteller:
----------
Instance Variables: hostelFee :double

Methods: Define parameterized constructor

Add the following methods in BOTH classes.

Method: displayDetails(): This method should return a string containing the details of the student

in the following format:

Student [name=John Smith,studentId=123,examFee=100.0] OR

DayScholar[transportFee=500, name=John Smith,studentId=123,examFee=100.0] and so on.

Method: payFee(amount): This method takes amount as parameter that represents the fee

provided. You must calculate and then return the remaining amount paid in excess. If excess is

paid, the returned amount will be negative. The total fees that each student must pay must

include all the fees applicable to that Student(examFees, transportFees, hostelFees as applicable).

Subtract the given amount from total fee for each student and return the remaining amount.


An ELC class Tester is given to you with a main method. Use this class to test your solution's

classes and methods.


Condition :
-----------
if any numeric value is zero or negative then print "Error Invalid Input".


TEST CASE 1 :
-------------
sample input  : When your reading values for Student class OR DayScholar Class OR Hosteller Class then make sure if any numeric value is <=0 then print "Error Invalid Input".

sample output : Error Invalid Input


TEST CASE 2 :
-------------
sample input  :
                 1. For Student Class:
                 studentId: 1
                 name: "John Smith"
                 examFee: 25000.0
                 Payment Amount: 25000.0

                 2. For DayScholar Class:
                 studentId: 2
                 name: "Brian Lara"
                 examFee: 25000.0
                 transportFee: 5000.0
                 Payment Amount: 37000.0

                 3. For Hosteller Class:
                 studentId: 3
                 name: "Virat Kohli"
                 examFee: 25000.0
                 hostelFee: 8000.0
                 Payment Amount: 33000.0

sample output :

                 Student[name=John Smith,studentId=1,examFee=25000.0]
                 All Fees are clear

                 DayScholar[TransportFee=5000.0,name=Brian Lara,studentId=2,examFee=25000.0]
                 Remaining amount to pay is: 12000.0

                 Hosteller[HostelFee=8000.0,name=Virat Kohli,studentId=3,examFee=25000.0]
                 All Fees are clear


#######################################################################

Que 7 : Zoo Management System
=============================

You are tasked with creating a Zoo Management System that can handle different types of animals.
You need to implement classes that represent animals and their specific characteristics.
In this system, you'll implement the concept of inheritance and method overriding to
showcase the behavior of animals.

Follow the provided code as a base, and create the necessary classes to satisfy the requirements below:

Create a class named Animal:
-----------------------------
It should have private instance variables name (String) and age (int).
Implement a constructor that initializes the name and age.
Define a method makeSound() that prints "The animal makes a generic sound."
Define a method displayInfo() that prints the name and age.

Create a subclass named Lion:
-----------------------------
Extend the Animal class.
Add a private instance variable maneLength (int).
Implement a constructor that takes name, age, and maneLength as parameters and initializes the superclass constructor.
Define a method makeSound() method to print "The lion roars loudly."
Define a method displayManeLength() that prints the maneLength.

Create another subclass named Elephant:
---------------------------------------
Extend the Animal class.
Add a private instance variable tuskLength (float).
Implement a constructor that takes name, age, and tuskLength as parameters and initializes the superclass constructor.
Define a method  the makeSound() method to print "The elephant trumpets."
Define a method displayTuskLength() that prints the tuskLength.

Create a class named ZooManagement (as provided in the code):
-------------------------------------------------------------
In the main method, create instances of both Lion and Elephant with appropriate values.
Print information about the lion and the elephant, including their specific attributes and the sounds they make.

Your task is to implement the required classes based on the provided problem description.


Condition :
-----------
if any numeric value is zero or negative then print "Error Invalid Input".


TEST CASE 1 :
-------------
sample input  : When your reading numeric values for any above Classe then make sure if any numeric value is <=0 then print "Error Invalid Input".

sample output : Error Invalid Input



TEST CASE 2 :
-------------
sample input :
               Lion:
               Name: "Simba"
               Age: 5
               Mane Length: 20 cm

               Elephant:
               Name: "Jumbo"
               Age: 10
               Tusk Length: 2.5 meters

sample output :
               Lion Details:
               Name: Simba, Age: 5
               The lion roars loudly.
               Mane Length: 20 cm

               Elephant Details:
               Name: Jumbo, Age: 10
               The elephant trumpets.
               Tusk Length: 2.5 meters


#######################################################################


Que 8 : Online Shopping System
==============================

You are building an Online Shopping System, and you need to create a class hierarchy to represent different types of products that customers can purchase. You will be implementing a set of classes that model the products and their attributes. The focus of this problem is to demonstrate the use of inheritance and method overriding in Java.

Follow the provided code as a base, and create the necessary classes to satisfy the requirements below:

Create a class named Product:
-----------------------------
It should have protected instance variables name (String) and price (double).
Implement a constructor that initializes the name and price.
Define a method displayInfo() that prints the product's name and price.
Define a method calculateTotalCost(int quantity) that calculates
and returns the total cost of purchasing a given quantity of the product.

Create a subclass named Electronics:
------------------------------------
Extend the Product class.
Add a private instance variable brand (String).
Implement a constructor that takes name, price, and brand as parameters and initializes the superclass constructor.
Define a method displayInfo() method to additionally print the product's brand.

Create another subclass named Clothing:
---------------------------------------
Extend the Product class.
Add a private instance variable size (String).
Implement a constructor that takes name, price, and size as parameters and initializes the superclass constructor.
Define a method  displayInfo() method to additionally print the product's size.

Create a class named OnlineShopping (as provided in the code):
--------------------------------------------------------------
In the main method, create instances of both Electronics and Clothing with appropriate values.
Print information about each product, including their specific attributes.
Calculate and print the total cost for a given quantity of each product.

Your task is to implement the required classes based on the provided problem description. This will help you practice inheritance concepts.

Note-Implement toString() in all the BLC classes to print the data of the corresponding objects.

Condition :
-----------
if any numeric value is zero or negative then print "Error Invalid Input".


TEST CASE 1 :
-------------
sample input  : When your reading numeric values for any above Classe then make
sure if any numeric value is <=0 then print "Error Invalid Input".

sample output : Error Invalid Input



TEST CASE 2 :
-------------
sample input :
               Electronics Product:
               Name: "Laptop"
               Price: $1200.00
               Brand: "Dell"
               Quantity: 2

               Clothing Product:
               Name: "T-Shirt"
               Price: $25.00
               Size: "Medium"
               Quantity: 3

sample output :
               Electronics Details:
               Product Name: Laptop
               Price: $1200.0
               Brand: Dell
               Total Cost for 2 units: $2400.0
               Electronics [name=Laptop, price=1200.0, brand=Dell]

               Clothing Details:
               Product Name: T-Shirt
               Price: $25.0
               Size: Medium
               Total Cost for 3 units: $75.0
               Clothing [name=T-Shirt, price=25.0, size=Medium]
