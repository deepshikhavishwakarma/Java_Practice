Question-1
-------------
Design a Software System for a Media Player
---------------------------------------------------
Define an interface named as MediaPlayer
 in this interface declare two abstract method

Methods :

name             : play()
Return Type          :void
Access Modifier     :public


Methods :

name             : stop()
Return Type          :void
Access Modifier     :public

Define another interface AdvancedmediaPlayer that extends MediaPlayer
and in this interface add one more abstract method i.e :

name             : pause()
Return Type          :void
Access Modifier     :public


Create a class MusicPlayer that implements AdvancedMediaPlayer and provides implementations for the methods, and write some standard printing message.

Create a class VideoPlayer that implements AdvancedMediaPlayer and provides implementations for the methods. and write some standard printing message.

Take  a Test class to demonstrate the functionality of the media player system.


Test Case-1 :
--------------

Sample Input:

Song Title: " Life"

Expected Output :

MusicPlayer [Song Title: Life]
Playing music    : Life
Pausing music    : Life
Stopping music    : Life


Test Case-2 :
---------------
Sample Input :" "

Expected Output :
error message :Title is not be empty string.



Question-2
-------------

Design a Caluculator Program

Define an interface Calculator :
 create one abstract method

Methods :

name             : calculateSum ()
Return Type          :void
Arguments Type       :varargs type
Access Modifier     :public

Take one normal class SimpleCalculator which implements Calculator interface

in this class just implement the overriden method calculateSum and write the specific logic in this method.

Create a Main class named as CalculatorTest nad instantiate the object and call the method for execution.


Test Case-1:

Sum of 1, 2, 3:
Sample Input :1,2,3

Expected Output: "Sum of the numbers: 6"

Test Case-2:
Sum of 10, 20, 30, 40:
Sample Input :(10, 20, 30, 40)
Expected Output: "Sum of the numbers: 100"

Test Case-3:
Sum of 5:
Sample Input :5
Expected Output: "Sum of the numbers: 5"

Test Case-4:

Sample Input :
Expected Output: "Sum of the numbers: 0"


Question -3
--------------

Design a Media Chat process :

 Define an interface  Messanger
inside this having an abstract method

Method Name          :sendMessage
Return Type            :void
Arguments Type     :User[Class Type]
Acess Modifier        :public

Create a base class named as User

Attributes :
name     :String (private)


create an parameterize constructor for initializing the
 properties.

in this class declare one method :

Method Name         : displayMessage
Return Type           : void
Arguments Type     : String
Acess Modifier        :public

in this method print all the information.


class InstagramUser :

Take another subclass InstagramUser whose super class is User

in this class for initializing super class properties we
can take constructor.

take one concrete method


Method Name         : sendDirectMessage
Return Type           : void
Arguments Type     : String
Acess Modifier        :public

Take another class InstagramChat which is extend from
the Messenger class and in this class just override the
sendMessage method of the interface.

this method is implementing the functionality which only
allow the InstagramUser class not allowing to other class
give error message.[User is not an Instagram user.]

Take the main class named as InstagramChatTest which is
having main method and inthis just demonstarte the
functionality and invoke the method based on requirement.






Question-4
--------------
Define an interface named as Notifier :

it's having one abstract method  :

Method Name         : notifyUsers
Return type              : void
Argument Type         :Varargs type
Access Modifier        :public

Create a base class User :

Attributes :

name  : String (private)
email  : String (private)


Take a parameterize constructor to initialize all the
varriables

Take one implemented class named as  EmailNotifier which
is implements Notifier

EmailNotifier :
-----------------

in this class override the notifyUsers method and give
the standard implementation according to logic.

in this class take one concrete method as private type :

Method Name         : sendEmail
Return type              : void
Argument Type         :User
Access Modifier        :private


Take one Main class named as NotifierTest Demonstrates the
functionality of the EmailNotifier class by creating
instances of User and calling the notifyUsers method with
multiple users.


Test Case-1 :
----------------

Sample Input:
User1: Name = "Alice", Email = "alice@example.com"
User2: Name = "Bob", Email = "bob@example.com"

Expected Output :

Sending email to Alice at alice@example.com
Sending email to Bob at bob@example.com


Test Case-2 :
--------------

Sample Input :

User: Name = "Charlie", Email = "charlie@example.com"

Expected Output :
Sending email to Charlie at charlie@example.com

Test Case-3 :
--------------

Sample Input:

User1: Name = "Frank", Email = null
User2: Name = "Grace", Email = null

Expected Output :

Sending email to Frank at null
Sending email to Grace at null